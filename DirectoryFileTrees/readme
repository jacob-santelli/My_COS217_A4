Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Joshua Yang

------------------------------------------------------------------------
Student 2: What is your name?

Jacob Santelli

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.



------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.



------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?



------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

None. (Splint generates warnings for the .c files we did not write,
but we assume it is not our responsibility to fix those.)

------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

checkerDT.c: line 195: low priority: 
   This function definition probably needs more local comments

Every section has a relevant comment, and this section of the code
is essentially one-line checks that return a detailed error message â€”
we feel like these error messages can already explain what the code
is doing. 

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."



------------------------------------------------------------------------
For each of the five faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1       int BDT_insert()
	                 (bdtBad1.c: line 440)
---------------------------------------------------------------
         ./bdtBad2       static size_t bdt_freeSubtree()
			 (bdtBad2.c: line 239)
---------------------------------------------------------------
         ./bdtBad3       static int BDT_addChild()
	 		 (bdtBad3.c: line 43)
---------------------------------------------------------------
         ./bdtBad4       static void BDT_strlenAccumulate()
	                 (bdtBad4.c: line 625) 
---------------------------------------------------------------
         ./bdtBad5       static int BDT_findNode()
	 		 (bdtBad5.c: line 394)
===============================================================

------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

nodeDT.h/nodeDTGood.c:

The parameter order for Node_new() is such that Path_T oPPath is the
first parameter and Node_T oNParent is the second parameter, but in
Node_hasChild(), which also takes these two paramters, the opposite is
true. The parameter order should be consistent in the functions.

In the descriptions of Node_hasChild() and Node_getChild(), it's not
made clear how *pulChildID and ulChildID actually work, even though
it's very important for the client to know that the ulChildID is an
index between 0 and the total num of children, not just some random
hash, for example. Stating the specifics (at least the bounds) of
ulChildID would be helpful to add in the comments here.

The two functions Node_getChild() and Node_hasChild() are largely
redundant and could be consolidated to avoid module bloat. For example,
you could call (void) Node_getChild() instead of Node_hasChild().

For Node_getParent() and Node_getPath(), the function comment should
be explicit about who is in charge of allocating memory and who owns
the memory after the function terminates. (See Node_toString(), which
comments on this correctly.)

dt.h/dtGood.c:

DT_rm should have more internal function comments, just like DT_insert
does. This would make it easier for a developer to debug DT_rm. The same
applies for functions like DT_toString(), DT_traversePath(), etc.

The static functions DT_traversePath() and DT_findNode() are largely
redundant and contribute to module bloat. These two functions could
be refactored into a single function.

Also, in general, it's not ideal to have the enum for SUCCESS be
set to 0; if a user wants to assert some function that returns
SUCCESS, simply calling assert(Node_someFunc()) will actually cause
the assert to fail even though Node_someFunc() returns SUCCESS because
the integer value of SUCCESS is 0, i.e. false in c. In short, this leads
to user confusion and frequent bugs. 

------------------------------------------------------------------------